/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, GetCountResponse, GetNameResponse} from "./ReadWriteState.types";
export interface ReadWriteStateReadOnlyInterface {
  contractAddress: string;
  getCount: () => Promise<GetCountResponse>;
  getFamilyName: ({
    firstName
  }: {
    firstName: string;
  }) => Promise<GetNameResponse>;
}
export class ReadWriteStateQueryClient implements ReadWriteStateReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getCount = this.getCount.bind(this);
    this.getFamilyName = this.getFamilyName.bind(this);
  }

  getCount = async (): Promise<GetCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_count: {}
    });
  };
  getFamilyName = async ({
    firstName
  }: {
    firstName: string;
  }): Promise<GetNameResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_family_name: {
        first_name: firstName
      }
    });
  };
}
export interface ReadWriteStateInterface extends ReadWriteStateReadOnlyInterface {
  contractAddress: string;
  sender: string;
  transferToTon: ({
    amount,
    crcSrc,
    denom,
    seq,
    to
  }: {
    amount: Uint128;
    crcSrc: string;
    denom: string;
    seq: number;
    to: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  submitBridgeToTonInfo: ({
    data
  }: {
    data: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ReadWriteStateClient extends ReadWriteStateQueryClient implements ReadWriteStateInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.transferToTon = this.transferToTon.bind(this);
    this.submitBridgeToTonInfo = this.submitBridgeToTonInfo.bind(this);
  }

  transferToTon = async ({
    amount,
    crcSrc,
    denom,
    seq,
    to
  }: {
    amount: Uint128;
    crcSrc: string;
    denom: string;
    seq: number;
    to: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_to_ton: {
        amount,
        crc_src: crcSrc,
        denom,
        seq,
        to
      }
    }, _fee, _memo, _funds);
  };
  submitBridgeToTonInfo = async ({
    data
  }: {
    data: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      submit_bridge_to_ton_info: {
        data
      }
    }, _fee, _memo, _funds);
  };
}